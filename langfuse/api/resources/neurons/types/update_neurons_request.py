# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime


class UpdateNeuronsRequest(pydantic.BaseModel):
    id: str
    project_id: typing.Optional[str] = pydantic.Field(alias="projectId")
    coldkey: typing.Optional[str]
    hotkey: typing.Optional[str]
    uid: typing.Optional[int]
    rank: typing.Optional[int]
    stake: typing.Optional[int]
    emission: typing.Optional[int]
    incentive: typing.Optional[int]
    consensus: typing.Optional[int]
    trust: typing.Optional[int]
    netuid: typing.Optional[int]
    registered: typing.Optional[bool]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
